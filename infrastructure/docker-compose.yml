version: '3.8'

services:
  mongo:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      # MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER} # Optional: defined in .env
      # MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD} # Optional: defined in .env
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-mydatabase} # Set database name from .env or default
    restart: unless-stopped
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio_storage
    ports:
      - "${MINIO_API_PORT:-9000}:9000"   # API port
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # Console port
    volumes:
      - minio_data:/data
      # - ./minio_config:/root/.minio # If specific MinIO config is needed
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: ${MINIO_BUCKET_NAME:-images} # Create bucket on startup
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  admin_app:
    container_name: admin_app
    build:
      context: ../admin_app
      dockerfile: Dockerfile # We will create this later
    ports:
      - "${ADMIN_APP_PORT:-8000}:8000"
    volumes:
      - ../admin_app:/app # Mount code for development hot-reloading
    env_file:
      - ../.env # Load environment variables
    depends_on:
      mongo:
        condition: service_started # Wait for mongo to be ready
      minio: 
        condition: service_healthy # Wait for minio healthcheck
    restart: unless-stopped
    networks:
      - app-network
    # command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # Will be set in Dockerfile CMD

  caddy:
    image: caddy:latest
    container_name: caddy_proxy
    restart: unless-stopped
    ports:
      - "${CADDY_HTTP_PORT:-80}:80"
      - "${CADDY_HTTPS_PORT:-443}:443"
      - "2019:2019" # Caddy admin API port (optional)
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro # Mount custom Caddy config
      - ../static_output:/srv/static_output:ro # Mount static files (adjust path if needed in Caddyfile)
      - caddy_data:/data # Persist certificates and other data
      - caddy_config:/config # Persist configuration
    depends_on:
      - admin_app
      # minio does not need to be depended on directly, proxy target is enough
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  minio_data:
  caddy_data:
  caddy_config: 