version: '3.8'

services:
  mongo:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_DATABASE: mydatabase
    restart: unless-stopped
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio_storage
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DEFAULT_BUCKETS: images
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  admin_app:
    container_name: admin_app
    build:
      context: .
      dockerfile: admin_app/Dockerfile
    ports:
      - "8000:8000"
    # volumes:
    #   - .:/app  # Temporarily commented out to allow static files from build step to be visible
    environment:
      MONGO_URI: mongodb://mongo:27017/mydatabase
      MONGO_DATABASE: mydatabase
      MINIO_ENDPOINT_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: images
      ADMIN_APP_PORT: 8000
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: admin123
      CADDY_DOMAIN_NAME: localhost
      CADDY_HTTP_PORT: 80
      CADDY_HTTPS_PORT: 443
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-http://localhost:8080}
    depends_on:
      mongo:
        condition: service_started
      minio: 
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  caddy:
    image: caddy:latest
    container_name: caddy_proxy
    restart: unless-stopped
    ports:
      - "${CADDY_HTTP_PORT:-8080}:80"
      - "443:443"
      - "2019:2019"
    volumes:
      - ./infrastructure/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./static_output:/srv/static_output:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - CADDY_DOMAIN_NAME=${CADDY_DOMAIN_NAME}
    depends_on:
      - admin_app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  minio_data:
  caddy_data:
  caddy_config: 